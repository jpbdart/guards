<?xml version="1.0" encoding="UTF-8"?>

<!--
RequestReply - Expect a command request then reply.

Author: J Peter Brady

-->

<!--
Copyright 2024 J. Peter Brady

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<xs:schema
  targetNamespace="urn:RequestReplyV3"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:net="urn:network/format"
  xmlns:oncrpcv3="urn:oncrpcv3"
  xmlns:rm3="urn:ReplyMainV3"
  xmlns:rr3="urn:RequestReplyV3"
  xmlns:xdr="urn:xdr"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- Network-byte-order binary format -->

  <xs:import namespace="urn:network/format" schemaLocation="network/format.dfdl.xsd"/>

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:format ref="net:format"/>
    </xs:appinfo>
  </xs:annotation>

  <!-- NFS v3 types -->

  <xs:import namespace="urn:xdr" schemaLocation="xdr.dfdl.xsd"/>
  <xs:import namespace="urn:oncrpcv3" schemaLocation="oncrpcv3.dfdl.xsd"/>
  <xs:import namespace="urn:ReplyMainV3" schemaLocation="ReplyMainV3.dfdl.xsd"/>

  <!--
    The request-reply tests are a bit synthetic, as they use one data file with
    the request immediately followed by the reply. The one issue is if the request
    fails for some reason, and leaves extra data, the reply has no idea of that
    and will probably fail for being out of sync with the data file.

    RqstRplyV3 calls the request entry first, then calls the reply when the Request
    returns. The entry_point in this file is different from the one in oncrpc
    as it will dipatch replies to ReplyMainV3, where they are further broken down
    into the type of call (NFS, portmap, etc.)
  -->
  <xs:element name="RqstRplyV3">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Request" type="rr3:entry_point" />
        <xs:element name="Reply" type="rr3:entry_point" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="entry_point">
    <xs:sequence>
      <xs:element name="xid"   type="xdr:unsignedInt" />
      <xs:element name="mtype" type="xdr:unsignedInt" />
      <xs:element name="entry_dispatch">
        <xs:complexType>
          <xs:choice dfdl:choiceDispatchKey="{ xs:string(../mtype) }">
            <xs:element name="call_body"  type="oncrpcv3:call_body"  dfdl:choiceBranchKey="0" />
            <xs:element name="reply_body" type="rm3:reply_body" dfdl:choiceBranchKey="1" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

</xs:schema>
