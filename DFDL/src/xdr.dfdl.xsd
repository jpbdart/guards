<?xml version="1.0" encoding="UTF-8"?>

<!--
RFC1014 - XDR: External Data Representation Standard

Author: J Peter Brady

DFDL implementation of RFC1014 (XDR).
-->

<!--
Copyright 2024 J. Peter Brady

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->

<xs:schema
  targetNamespace="urn:xdr"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:net="urn:network/format"
  xmlns:xdr="urn:xdr"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- Network-byte-order binary format -->

  <xs:import namespace="urn:network/format" schemaLocation="network/format.dfdl.xsd"/>

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:format ref="net:format"/>
    </xs:appinfo>
  </xs:annotation>

  <!-- XDR data types -->

  <xs:simpleType name="int">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>

  <xs:simpleType name="unsignedInt">
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>

  <xs:simpleType name="hyper">
    <xs:restriction base="xs:long"/>
  </xs:simpleType>

  <xs:simpleType name="unsignedHyper">
    <xs:restriction base="xs:unsignedLong"/>
  </xs:simpleType>

  <xs:simpleType name="float">
    <xs:restriction base="xs:float"/>
  </xs:simpleType>

  <xs:simpleType name="double">
    <xs:restriction base="xs:double"/>
  </xs:simpleType>

  <xs:simpleType name="bool">
    <xs:restriction base="xs:boolean"/>
  </xs:simpleType>

  <!-- opaque data (fixed length must be a multiple of 4 bytes) -->
  <xs:simpleType name="opaqueN"
                 dfdl:lengthKind="explicit"
                 dfdl:lengthUnits="bytes">
    <xs:restriction base="xs:hexBinary"/>
  </xs:simpleType>

  <!-- opaque data (variable length, padded to a multiple of 4 bytes) -->
  <xs:complexType name="opaque">
    <xs:sequence>
      <xs:element name="opaque"
                  type="xs:hexBinary"
                  dfdl:lengthKind="prefixed"
                  dfdl:lengthUnits="bytes"
                  dfdl:prefixLengthType="xdr:unsignedInt"/>
      <!-- pad opaque to a multiple of 4 bytes -->
      <xs:sequence dfdl:alignment="4" dfdl:alignmentUnits="bytes"/>
    </xs:sequence>
  </xs:complexType>

  <!-- string (variable length, padded to a multiple of 4 bytes) -->
  <xs:complexType name="string">
    <xs:sequence>
      <!-- use hexBinary until codegen-c supports string -->
      <xs:element name="strValue"
                  type="xs:hexBinary"
                  dfdl:lengthKind="prefixed"
                  dfdl:lengthUnits="bytes"
                  dfdl:prefixLengthType="xdr:unsignedInt"/>
      <!-- pad string to a multiple of 4 bytes -->
      <xs:sequence dfdl:alignment="4" dfdl:alignmentUnits="bytes"/>
    </xs:sequence>
  </xs:complexType>
  <xs:group name="string">
    <xs:sequence>
      <!-- use hexBinary until codegen-c supports string -->
      <xs:element name="strValue"
                  type="xs:hexBinary"
                  dfdl:lengthKind="prefixed"
                  dfdl:lengthUnits="bytes"
                  dfdl:prefixLengthType="xdr:unsignedInt"/>
      <!-- pad string to a multiple of 4 bytes -->
      <xs:sequence dfdl:alignment="4" dfdl:alignmentUnits="bytes"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="void">
    <xs:sequence/>
  </xs:complexType>

</xs:schema>
